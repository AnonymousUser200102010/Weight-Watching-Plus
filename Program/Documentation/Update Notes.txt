Update 6:

Highlights:
-- Removed all global variables relating to the MainForm, as I've now figured out how to manipulate them without the need for a direct reference.

Features:
--

Bug Fixes:
--

Notes:
--
------------------------------------------------------
Update 5:

Highlights:
-- new item functionality has been improved. Before it allowed a work-around to the "NoIdentical" error by modifying after creating. This has been fixed.
-- Registry system revamped. Hopefully with more accurate and efficient results. So far so good, though.
-- GUI slimmed down. Add/Subtract and Manual are in a tab window together, among other things.
-- At this point in time, with special characters causing errors in completely unrelated functions, I am HIGHLY recommending avoiding ANY and ALL special characters. I don't know why it has such a hard time parsing them, but it does, so I'd avoid them like the plague if I were you.
-- Summaries added to all pertinent functions and variables.
-- Each class in the Mainform.cs file that was not general functions only moved to their own *.cs file for ease of use.
-- Solution folder tree restructured.
-- Documentation added for the UniversalHandlersLibrary in the form of summaries.
-- Global variables removed: Default calories, Calories.

Features:
-- Implemented rudimentary argument support.
-- Manual Reset Time implemented: this feature allows you to set the time the calories will reset, and it will remain at this value until you change it (not recommended for beginners!
	-- Right now, the MRT resets to disabled every turn on and shut off. This is a sort of "fail-safe" for beginners. I am thinking of implementing it as persistent, however.
-- Under-eating/overeating benefit/subtraction added to ensure people who eat less can have a ... few slip-ups, and those who have persistent overeating habits are punished when the calories reset. For now, this will give the whole allowance. As I progress with the program, I will do research into this subject and hopefully make it more accurate and less arbitrary.
-- Midnight Snacking Penalty is now referred to as the Eating Before Bed Penalty. If you eat within 8 hours of the reset time, you're punished. This strictly follows hour ONLY for the time being. I hope to fix it to be more accurate in the future.
-- Default calorie numeric edit box added so you no longer have to fiddle with the code to set the default calorie allowance.

Bug Fixes:
-- Fixed a bug with the newly implemented "NoIdentical" error on adding an item (which unintentionally stopped property setting).
-- Fixed the persistent bug mentioned in the last update.
-- Manual tab would never update it's value with the actual calorie count. This has been fixed.
-- Search function would not return to the top of the food list upon reaching the last possible valid search entry. This has been fixed. The program would also crash when attempting to use the "exact" search function. This has also been fixed.
-- Fixed a bug with the "Midnight Snacking Penalty" functionality that did not prompt the user, among other things.
-- Fixed a bug with the food table writer function which failed because a value was less than 1 and did not validate correctly thereafter.
-- UniversalHandlersLibrary had a bug where it would crash when Messages.txt did not exist (and to a lesser extent, errors.dmp), this has been fixed.

Notes:
-- Readability of the code may be diminished as of this update due to the reformatting of each class upon splitting from the MainForm.cs file. I've done my best to keep this to a minimum.
------------------------------------------------------
Update 4:

Highlights:
-- FxCop installed and used to update and optimize code.
-- Programmatic folder tree restructuring.
-- Modification class added...A new class with functions whose primary purpose is modification and creation, but who don't have a more pressing primary function.
-- Regions added where appropriate for easier traversal of code. (May not be fully completed as of this update)
-- Serious readability restructuring.
-- ErrorHandler class name changed to PopupHandler, as it does not handle only errors and always uses popups.
-- Switched from dictionaries to tuples as my main form of data management. It's easier to read and in general easier to code than having 4 different libraries instead of one variable with 4 values.
-- Using nested IList for now until I am better acquainted with lists and tuples. I do plan to change it later on.

Features:
-- Diary feature implemented, making food tracking 1/3rd complete.
-- Officially removed food table.txt to food.table conversion support. I don't feel it is required any longer. But if you must convert, I've supplied a converter. I don't know if it works, but it should.
-- Automatic sorting support added for: Food List-box
-- Automatic sorting support added for: food.table

Assets:
-- UniversalHandlersLibrary added. This library contains code for message to file and error to file support, as well as the custom contains method.

Bug Fixes:
-- Diary would not catalogue negative values. This, as well as a few aesthetic features, has been fixed.
-- Fixed a bug in the next button with regards to search that appeared in the 3.5 update (maybe earlier).
-- Applied a sloppy fix to a persistent bug in the refresh button which required three (sometimes more) presses before it actually refreshed. I'll attempt to apply a real fix sometime in the future.

Notes:
Due to the crossover to tuple, there may be a ton of bugs, holes, or nested loops in the code. Just be aware of this in the future.
------------------------------------------------------
Update 3:

Highlights:
-- Update notes started
-- Midnight snacking penalty added
-- Isolated Global Variables to it's own file, hopefully with greater reliability.
-- Set validators for the "foodPropertiesSwitch" function which makes sure there is a value in each text box/numeric_up_down else it stops the user.
-- Added rudimentary error handler for message boxes. Moved to it's own file and I plan to add to it later.
-- Validation class added...A new class for use with functions whose primary purpose is verification and validation, but who don't have a more pressing function.
-- A myriad of structural, practical and readability fixes.